[tool.poetry]
name = "lets-schedule"
version = "0.1.0"
description = ""
authors = ["Ruslan <admin@ruslan.beer>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.115.6"
uvicorn = "^0.34.0"
pydantic = {extras = ["settings"], version = "^2.10.4"}
sqlalchemy = "^2.0.36"
alembic = "^1.14.0"
asyncpg = "^0.30.0"


[tool.poetry.group.dev.dependencies]
ipython = "^8.31.0"
ruff = "^0.8.5"
isort = "^5.13.2"
mypy = "^1.14.1"
black = "^24.10.0"
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.25.1"
pytest-xdist = "^3.6.1"
pytest-freezegun = "^0.4.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
multi_line_output = 3
skip = ["migrations"]

[tool.black]
exclude = '''
/(
  | migrations
  | .venv
)/
'''
line_length = 120


[tool.ruff]

# 'flake8-bugbear' -> 'lint.flake8-bugbear'\n"
# set of rules
lint.select = [
    "E", # pycodestyle
    "F", # Pyflakes
    "N", # pep8-naming
    "UP", # pyupgrade
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "DJ", # flake8-django
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "INP", # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pyi
    "Q", # flake8-quotes
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "INT", # flake8-gettext
    "PTH", # flake8-use-pathlib
    "FIX", # flake8-fixme
    # Ruff-specific rules
    "RUF008", # Do not use mutable default values for dataclass attributes
    "RUF009", # Do not perform function call {name} in dataclass defaults
    "RUF010", # Use explicit conversion flag
    "B035", # Dictionary comprehension uses static key: {key}
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
    "RUF013", # PEP 484 prohibits implicit Optional
    "RUF015", # Prefer next({iterable}) over single element slice
    "RUF016", # Slice in indexed access to type {value_type} uses type {index_type} instead of an integer.
    "RUF100", # Unused noqa directive
    "RUF200", # Failed to parse pyproject.toml
]
lint.ignore = [
    "FIX002", # Line contains TODO, consider resolving the issue
    "N806", # Variable `UpperCase` in function should be lowercase
]

fix = true
line-length = 120
target-version = "py313"
extend-exclude = [".venv", "venv", "migrations"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.params.Depends",
    "fastapi.Query",
    "fastapi.params.Query",
]


[tool.mypy]
python_version = "3.13"
plugins = ["sqlalchemy.ext.mypy.plugin"]
exclude = ["migrations"]
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
warn_no_return = true
namespace_packages = true
explicit_package_bases = true
disallow_untyped_defs = true
disallow_untyped_calls = false
strict = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["asyncpg", "asyncpg.exceptions"]
ignore_missing_imports = true


[tool.pytest.ini_options]
python_files = "tests_*.py test_*.py"
asyncio_mode = "auto"
addopts = "--cov-report term-missing:skip-covered --cov=src --no-cov-on-fail  --capture tee-sys"
filterwarnings = [
    "ignore::DeprecationWarning:pytest_freezegun.*:",
]

[tool.coverage.run]
parallel = true
omit = ["**/tests/*"]
